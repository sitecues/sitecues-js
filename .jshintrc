{
  
  // sitecues JSHint Config

  "maxerr"        : 100,
  "indent"        : 2,
  "laxbreak"      : false,
  "laxcomma"      : true,
  "nomen"         : true,
  "onevar"        : false,
  "undef"         : true,
  "camelcase"     : false,     // true: Identifiers must be in camelCase
  "plusplus"      : false,    // true: Prohibit use of `++` & `--`
  "quotmark"      : "single", // Quotation mark consistency
  "unused"        : true,     // true: Require all defined variables be used
  "strict"        : true,     // true: Requires all functions run in ES5 Strict Mode
  "immed"         : true,     // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`

  // Define Global Variables Here   -- copy to both predef and globals sections
  // because predef section was not working in WebStorm
  
  "predef": [
    "XMLHttpRequest",
    "XDomainRequest",
    "ActiveXObject",
    "sitecues",
    "sitecuesEverywhere",
    "module",
    "CSSPrimitiveValue",
    "CSSStyleDeclaration",
    "escape",
    "console",
    "SC_DEV",
    "SC_UNIT",
    "SC_LOCAL",
    "$",
    "require",
    "define",
    "webkitAudioContext",
    "devicePixelRatio"
  ],

  // Globals -- copy to both predef and globals sections
  // because predef section was not working in WebStorm

  "globals": {
    "XMLHttpRequest": true,
    "XDomainRequest": true,
    "ActiveXObject": true,
    "sitecues": true,
    "sitecuesEverywhere": true,
    "module": true,
    "CSSPrimitiveValue": true,
    "CSSStyleDeclaration": true,
    "escape": true,
    "console": true,
    "SC_DEV": true,
    "SC_UNIT": true,
    "SC_LOCAL": true,
    "$": true,
    "require": true,
    "define": true,
    "webkitAudioContext": true,
    "devicePixelRatio": true
  },

  // Enforcing

  "bitwise"       : true,     // true: Prohibit bitwise operators (&, |, ^, etc.)
  "curly"         : true,     // true: Require {} for every new block or scope
  "eqeqeq"        : true,     // true: Require triple equals (===) for comparison
  "forin"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()
  "latedef"       : false,    // true: Require variables/functions to be defined before being used
  "newcap"        : false,    // true: Require capitalization of all constructor functions e.g. `new F()`
  "noarg"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`
  "noempty"       : false,    // false: Allow use of empty blocks
  "nonew"         : true,     // true: Prohibit use of constructors for side-effects (without assignment)
  "trailing"      : false,    // true: Prohibit trailing whitespaces
  "maxparams"     : false,    // {int} Max number of formal params allowed per function
  "maxdepth"      : false,    // {int} Max depth of nested blocks (within functions)
  "maxstatements" : false,    // {int} Max number statements per function
  "maxcomplexity" : false,    // {int} Max cyclomatic complexity per function
  "maxlen"        : false,    // {int} Max number of characters per line
  

  // Relax Standards by setting these to true

  "asi"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)
  "boss"          : false,     // true: Tolerate assignments where comparisons would be expected
  "debug"         : false,     // true: Allow debugger statements e.g. browser breakpoints.
  "eqnull"        : false,     // true: Tolerate use of `== null`
  "es5"           : false,     // true: Allow ES5 syntax (ex: getters and setters)
  "esnext"        : false,     // true: Allow ES.next (ES6) syntax (ex: `const`)
  "moz"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)
  "evil"          : false,     // true: Tolerate use of `eval` and `new Function()`
  "expr"          : false,     // true: Tolerate `ExpressionStatement` as Programs
  "funcscope"     : false,     // true: Tolerate defining variables inside control statements
  "globalstrict"  : false,     // true: Allow global use strict (also enables strict)
  "iterator"      : false,     // true: Tolerate using the `__iterator__` property
  "lastsemic"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block
  "loopfunc"      : false,     // true: Tolerate functions being defined in loops
  "multistr"      : false,     // true: Tolerate multi-line strings
  "proto"         : false,     // true: Tolerate using the `__proto__` property
  "scripturl"     : false,     // true: Tolerate script-targeted URLs
  "smarttabs"     : false,     // true: Tolerate mixed tabs/spaces when used for alignment
  "shadow"        : false,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`
  "sub"           : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation
  "supernew"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`
  "validthis"     : false,     // true: Tolerate using this in a non-constructor function

  
  // Environments

  "browser"       : true,     // Web Browser (window, document, etc)
  "couch"         : false,    // CouchDB
  "devel"         : false,    // Development/debugging (alert, confirm, etc)
  "dojo"          : false,    // Dojo Toolkit
  "jquery"        : false,    // jQuery
  "mootools"      : false,    // MooTools
  "node"          : false,    // Node.js
  "nonstandard"   : false,    // Widely adopted globals (escape, unescape, etc)
  "prototypejs"   : false,    // Prototype and Scriptaculous
  "rhino"         : false,    // Rhino
  "worker"        : false,    // Web Workers
  "wsh"           : false,    // Windows Scripting Host
  "yui"           : false,    // Yahoo User Interface
  "passfail"      : false,
  "white"         : false,

  // JS Lint Warnings

  "-W065": true,      // Refer to http://jslinterrors.com/missing-radix-parameter/
  "-W008": true,      // Leading 0 before decimal point
  "-W030": false,     // Allows stuff like: SC_DEV && console.log('foo') rather than if (SC_DEV) { console.log('foo'); }
  "-W014": false      // Allows && or || to start a line, which can help make more readable code when there are numerous conditions


  }