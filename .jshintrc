{

  // Configuration for JSHint. These settings are used to ensure code quality during the build process.

  // TODO: MAYBE add...
  //  - es3
  //  - freeze
  //  - futurehostile (docs are wrong, set to false, under relaxing)
  //  - notypeof (false, under relaxing)
  //  - elision (false, under relaxing)
  //  - withstmt (false, under relaxing)
  //  - nocomma (true, under enforcing)
  //  - nonbsp (true, under enforcing)
  //  - singleGroups (true, under enforcing)

  // TODO: Remove options marked as deprecated or unnecessary.

  // TODO: MAYBE "shadow" : "outer" to cause more complaints?

  // Maximum number of rule violations to report before giving up.
  "maxerr"        : 100,

  // List of variables to assume are already defined. Set to `true` to tolerate assigments to those variables.
  "globals": {
    // UNNECESSARY. Use `browser` option.
    "XMLHttpRequest": true,
    // UNNECESSARY. Use `browser` option.
    "XDomainRequest": true,
    // UNNECESSARY. Use `browser` option.
    "ActiveXObject": true,
    "sitecues": true,
    "sitecuesEverywhere": true,
    // UNNECESSARY ?? We shouldn't be mixing Node.js and browser code, generally.
    "module": true,
    // UNNECESSARY. Use `browser` option.
    "CSSPrimitiveValue": true,
    // UNNECESSARY. Use `browser` option.
    "CSSStyleDeclaration": true,
    "escape": true,
    "console": true,
    "SC_DEV": true,
    "SC_UNIT": true,
    "SC_LOCAL": true,
    "SC_VERSION": true,
    "$": true,
    "require": true,
    "define": true,
    "webkitAudioContext": true,
    // UNNECESSARY. Use `browser` option.
    "devicePixelRatio": true
  },

  // Enforcing - Rules that cause the linter to complain more.

  // Whether to prohibit bitwise operators (&, |, ^, etc.), which are frequently typos.
  "bitwise"       : true,
  // Whether to demand {} for every new block or scope, because explicit is good.
  "curly"         : true,
  // Whether to demand triple equals (===) and disallow double equals, because type coercion is not user friendly.
  "eqeqeq"        : true,
  // Whether to demand filtering for..in loops with obj.hasOwnProperty() to avoid the prototype chain.
  "forin"         : true,
  // Whether to demand that variables are defined above where they are first used.
  "latedef"       : false,
  // Maximum cyclomatic complexity per function. Helps discourage overly complex code.
  "maxcomplexity" : false,
  // Maximum depth of nested blocks (within functions). Helps discourage overly complex code.
  "maxdepth"      : false,
  // Maximum number of formal params allowed per function. Helps discourage overly complex code.
  "maxparams"     : false,
  // Maximum number of statements allowed per function. Helps discourage overly complex code.
  "maxstatements" : false,
  // Whether to prohibit use of `arguments.caller` and `arguments.callee`, which is not in modern JS anymore.
  "noarg"         : true,
  // Whether to prohibit use of constructors for side-effects (without assignment).
  "nonew"         : true,
  // Whether to prohibit use of `++` & `--`, which are usually not well understood outside of basic loops.
  "plusplus"      : false,
  // Whether to demand that all functions are run in ES5 Strict Mode
  "strict"        : false,
  // Whether to prohibit usage of variables that are never defined.
  "undef"         : true,
  // Whether to demand that all variables that are defined do eventually get used.
  "unused"        : true,


  // Relaxing - Rules that cause the linter to chill out and complain less.

  // Whether to tolerate Automatic Semicolon Insertion (no semicolons), even though the rules are hard to remember.
  "asi"           : false,
  // Whether to tolerate assignments where comparisons would be expected.
  "boss"          : false,
  // Whether to tolerate debugger statements e.g. browser breakpoints, even though they are not fit for production.
  "debug"         : false,
  // Whether to tolerate use of `== null`, even though it does type coercion.
  "eqnull"        : false,
  // Whether to tolerate use of ES5 syntax, like getters and setters, even though old browsers don't support it.
  "es5"           : false,
  // Whether to tolerate use of ES6 syntax, like `const`, event though old browsers don't support it.
  "esnext"        : false,
  // Whether to tolerate use of `eval` and `new Function()`, even though they can lead to security problems.
  "evil"          : false,
  // Whether to tolerate seemingly useless expressions, even though they are usually typos.
  "expr"          : false,
  // Whether to tolerate defining variables (with `var`) inside of blocks, even though that is not their scope.
  "funcscope"     : false,
  // Whether to tolerate global use strict (also enables strict), even though nested code might not conform.
  "globalstrict"  : false,
  // Whether to tolerate use of the `__iterator__` property.
  "iterator"      : false,
  // Whether to tolerate omitting a semicolon for the last statement of a one-line block.
  "lastsemic"     : false,
  // Whether to tolerate functions being defined in loops, even though it usually doesn't behave as first expected.
  "loopfunc"      : false,
  // Whether to tolerate Mozilla specific syntax (extends and overrides esnext features)
  "moz"           : false,
  // Whether to tolerate using the `__proto__` property, even though it is non-standard and may hurt performance.
  "proto"         : false,
  // Whether to tolerate script-targeted URLs.
  "scripturl"     : false,
  // Whether to tolerate re-defining variables, which is often a mistake. e.g. `var x=1; x=2;`
  // TODO: MAYBE: "shadow" : "outer" to cause more complaints?
  "shadow"        : false,
  // Whether to tolerate `new function () { ... };` and `new Object;`, even though it probably doesn't do what you want.
  "supernew"      : false,
  // Whether to tolerate using `this` in a non-constructor function, where it typically points to the global object.
  "validthis"     : false,


  // Environments

  "browser"       : true,     // Web Browser (window, document, etc)
  "couch"         : false,    // CouchDB
  "devel"         : false,    // Development/debugging (alert, confirm, etc)
  "dojo"          : false,    // Dojo Toolkit
  "jquery"        : false,    // jQuery
  "mootools"      : false,    // MooTools
  "node"          : false,    // Node.js
  "nonstandard"   : false,    // Widely adopted globals (escape, unescape, etc)
  "prototypejs"   : false,    // Prototype and Scriptaculous
  "rhino"         : false,    // Rhino
  "worker"        : false,    // Web Workers
  "wsh"           : false,    // Windows Scripting Host
  "yui"           : false,    // Yahoo User Interface
  "passfail"      : false,
  "white"         : false,

  // JS Lint Warnings

  // Whether to tolerate calling parseInt() without supplying the radix, even though it can lead to bugs.
  "-W065": true,      // Refer to http://jslinterrors.com/missing-radix-parameter/
  // Whether to tolerate decimal numbers like `var x = .543` without a leading zero, even though it could be a typo and is less readable.
  "-W008": true,      // Leading 0 before decimal point
  // UNNECESSARY. This is merely an alias to the `expr` option.
  "-W030": false,     // Allows stuff like: SC_DEV && console.log('foo') rather than if (SC_DEV) { console.log('foo'); }
  // UNNECESSARY. ?? I think this is merely an alias to the `laxbreak` option.
  "-W014": false      // Allows && or || to start a line, which can help make more readable code when there are numerous conditions
}
