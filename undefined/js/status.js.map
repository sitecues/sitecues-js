{"version":3,"sources":["../../config-wrap-start-default.js","status/status.js","../../../../../../module-create.js"],"names":["sitecues","define","urls","xhr","pref","site","nativeGlobal","format","object","INDENTATION","result","JSON","stringify","consoleCallback","status","location","protocol","console","log","callback","coordinates","setting","state","info","html","document","documentElement","prefData","get","ajaxUrls","ws","getApiUrl","time","Date","now","currentUrl","href","userAgent","navigator","version","js","config","getSiteConfig","clientWidth","clientHeight","clientLeft","clientTop","window","pageXOffset","pageYOffset","innerWidth","innerHeight","outerWidth","outerHeight","screenX","screenY","screen","width","height","availWidth","availHeight","availLeft","availTop","hasOwnProperty","readyCheck","ready","latest","SC_LOCAL","getJSON","type","url","success","response","error"],"mappings":"AAAA;;AACAA,SAAAC,OCAA,mBACA,iBACA,gBACA,wBACA,iBACA,6BAEA,SACAC,MACAC,KACAC,MACAC,MACAC;EAIA,SAAAC,OAAAC;;IAIA,IAAAC,cAAA,QACAC,SAAAF;IAEA,IAAAF,aAAAK,QAAAL,aAAAK,KAAAC;MACAF,SAAAJ,aAAAK,KAAAC,UAAAJ,QAAA,MAAAC;;IAGA,OAAAC;;EAGA,SAAAG,gBAAAC;;;IAKA,IAAA,YAAAC,SAAAC,YAAA,aAAAD,SAAAC;;MAEA,IAAAC,WAAAA,QAAAC,KAAA;;QAEAD,QAAAC,IAAA;;QAEAD,QAAAC,IAAAX,OAAAO;;QAEAG,QAAAC,IAAA;;;;EAKA,SAAAJ,OAAAK;IAEA,IAEAC,aAIAC,SACAC,OACAC,MARAC,OAAAC,SAAAC,iBACAC,WAAAvB,KAAAwB,OAEAC;;MACAC,IAAA5B,KAAA6B,UAAA;;IAMAZ,WAAAA,YAAAN;IAEAU;MACAS,MAAAC,KAAAC;MACAC,YAAApB,SAAAqB;MACAC,WAAAC,UAAAD;MACAE;QACAC,IAAAxC,SAAAuC;QACAT,IAAA;;MAEAW,QAAApC,KAAAqC;;;;IAIAtB;MACAK;QACAkB,aAAAnB,KAAAmB;QACAC,cAAApB,KAAAoB;QACAC,YAAArB,KAAAqB;QACAC,WAAAtB,KAAAsB;;MAEAC;QACAC,aAAAA;QACAC,aAAAA;QACAC,YAAAA;QACAC,aAAAA;QACAC,YAAAA;QACAC,aAAAA;QACAC,SAAAA;QACAC,SAAAA;;MAEAC;QACAC,OAAAD,OAAAC;QACAC,QAAAF,OAAAE;QACAC,YAAAH,OAAAG;QACAC,aAAAJ,OAAAI;QACAC,WAAAL,OAAAK;QACAC,UAAAN,OAAAM;;;;IAKA,KAAAzC,WAAAM;MACA,IAAAA,SAAAoC,eAAA1C;QACAE,KAAAF,WAAAM,SAAAN;;;;IAIA,KAAAC,SAAAF;MACA,IAAAA,YAAA2C,eAAAzC;QACAC,KAAAD,SAAAF,YAAAE;;;;IAKA,SAAA0C;MACA,IAAAC,QAAA,oBAAA1C,KAAAgB,QAAAT;MAEA,IAAAmC,OAAA;;QAEAjE,SAAAc,OAAAoD,SAAA3C;QACAJ,SAAAI;;;IAIA,IAAA4C;MACAhD,SAAAI;;MAGApB,IAAAiE;QACAC,MAAA;QACAC,KAAAzC,SAAAC;QACAyC,SAAA,SAAAC;;UAEAjD,KAAAgB,QAAAT,KAAA0C,SAAAjC;UACAyB;;QAEAS,OAAA;;UAEAlD,KAAAgB,QAAAT,KAAA;UACAkC;;;;IAKA,OAAA;;EAGA,OAAAlD;;;ACpJAd,SAAAC,OAAA,UAAA","file":"status.js.map","sourcesContent":["\"use strict\";\n","sitecues.define(\n  'status/status',[\n    'run/conf/urls',\n    'run/util/xhr',\n    'run/conf/preferences',\n    'run/conf/site',\n    'mini-core/native-global'\n  ],\n  function (\n    urls,\n    xhr,\n    pref,\n    site,\n    nativeGlobal\n  ) {\n  'use strict';\n\n    function format(object) {\n\n      // Helper to turn objects into string representations for logging.\n\n      var INDENTATION = '    ',\n            result = object;\n\n      if (nativeGlobal.JSON && nativeGlobal.JSON.stringify) {\n        result = nativeGlobal.JSON.stringify(object, null, INDENTATION);\n      }\n\n      return result;\n    }\n\n    function consoleCallback(status) {\n\n      // The default status reporter, logs all data to the console.\n\n      // Make sure we are not running from a file (unit testing in node)...\n      if (location.protocol === 'http:' || location.protocol === 'https:') {\n        // We only support the native console for now, so make sure it exists...\n        if (console && console.log) {\n          // Make it clear where to begin copying...\n          console.log('\\n-----BEGIN SITECUES STATUS-----\\n');\n          // Log with pretty-print, if possible...\n          console.log(format(status));\n          // Make it clear where to end copying...\n          console.log('\\n-----END SITECUES STATUS-----\\n');\n        }\n      }\n    }\n\n    function status(callback) {\n\n      var html = document.documentElement,\n          prefData = pref.get(),\n          coordinates,\n          ajaxUrls = {  // Set the server URLs for retrieving the status of our services (version info, etc.)\n            ws : urls.getApiUrl('util/status')\n          },\n          setting,\n          state,\n          info;\n\n      callback = callback || consoleCallback;\n\n      info = {\n        time       : Date.now(),\n        currentUrl : location.href,\n        userAgent  : navigator.userAgent,\n        version    : {\n          js : sitecues.version,\n          ws : null\n        },\n        config     : site.getSiteConfig()\n      };\n      // Measurements useful for reproducing bugs, because their state affects\n      // the behavior of our CSS, animations, etc.\n      coordinates = {\n        document : {\n          clientWidth  : html.clientWidth,\n          clientHeight : html.clientHeight,\n          clientLeft   : html.clientLeft,\n          clientTop    : html.clientTop\n        },\n        window : {\n          pageXOffset  : pageXOffset,\n          pageYOffset  : pageYOffset,\n          innerWidth   : innerWidth,\n          innerHeight  : innerHeight,\n          outerWidth   : outerWidth,\n          outerHeight  : outerHeight,\n          screenX      : screenX,\n          screenY      : screenY\n        },\n        screen : {\n          width        : screen.width,\n          height       : screen.height,\n          availWidth   : screen.availWidth,\n          availHeight  : screen.availHeight,\n          availLeft    : screen.availLeft,\n          availTop     : screen.availTop\n        }\n      };\n\n      // Add current settings (zoom level, etc) to the log.\n      for (setting in prefData) {\n        if (prefData.hasOwnProperty(setting)) {\n          info[setting] = prefData[setting];\n        }\n      }\n      // Add all measurements for bug reproduction to the log.\n      for (state in coordinates) {\n        if (coordinates.hasOwnProperty(state)) {\n          info[state] = coordinates[state];\n        }\n      }\n\n      // Defer the ajax calls so we can respond when both are complete.\n      function readyCheck() {\n        var ready = typeof info.version.ws === 'string';\n\n        if (ready) {\n          // Publish the status for later retrieval.\n          sitecues.status.latest = info;\n          callback(info);\n        }\n      }\n\n      if (SC_LOCAL) {\n        callback(info); // Avoid xhr in local mode (including extension)\n      }\n      else {\n        xhr.getJSON({\n          type: 'GET',\n          url: ajaxUrls.ws,\n          success: function (response) {\n            // Set the version based on the AJAX response object\n            info.version.ws = response.version;\n            readyCheck();\n          },\n          error: function () {\n            // Set an error message if the AJAX object did not return\n            info.version.ws = 'Error fetching WS version from service URL';\n            readyCheck();\n          }\n        });\n      }\n\n      return 'Fetching Sitecues status...';\n    }\n\n    return status;\n  }\n);\n\n","\nsitecues.define(\"status\", function(){});\n"]}